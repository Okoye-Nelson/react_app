version: 2.1

orbs:
  kubernetes: circleci/kubernetes@0.12.0
  aws-cli: circleci/aws-cli@2.0
  aws-eks: circleci/aws-eks@0.2.3

jobs:
  build-react_app:
    docker:
      - image: circleci/node:16.13.0
    steps:
      - checkout
      - run:
          name: Build front-end
          command: |
            # Your code here
            sudo npm i
            npm run build
      - save_cache:
          key: frontend-build
          paths: [node_modules]
  test-react_app:
    docker:
      - image: circleci/node:16.13.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: test frontend
          command: |
            # Your code here
            npm run test
  lint-react_app:
    docker:
      - image: circleci/node:16.13.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: lint react_app
          command: |
            # Your code here
            npm run lint
  lint-docker:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            hadolint ./Dockerfile
  push-react_app:
    machine: true
    steps:
      - checkout
      - run:
          name: Build docker container
          command: |
                docker login --username ${DOCKERHUB_USERNAME} --password ${$DOCKERHUB_PASSWORD}
                docker build -t react_app:latest .
                docker images ls
                docker tag react_app ${DOCKERHUB_USERNAME}/react_app:latest
                docker push ${DOCKERHUB_USERNAME}/react_app:latest
  deploy:
    machine: true
    steps:
      - checkout
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            sudo apt-get install unzip -y
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Update Docker Image in ECS
          command: |
            echo "Retrieve an authentication token and authenticate your Docker client to your registry:"
            aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin 899955854446.dkr.ecr.us-west-2.amazonaws.com

            echo "Build docker image:"
            docker build -t react_app .

            echo "Tag image to push to ECR repository:"
            docker tag react_app:latest 899955854446.dkr.ecr.us-west-2.amazonaws.com/react_app:latest

            echo "Push image to newly created ECR repository:"
            docker push 899955854446.dkr.ecr.us-west-2.amazonaws.com/react_app:latest

            echo "Update ECS cluster:"
            aws ecs update-service --cluster react_app-cluster --service react-sv --force-new-deployment --no-cli-pager

            echo "Successful!"

workflows:
  default:
    jobs:
      - build-react_app
      - lint-react_app:
          requires: [build-react_app]
      - lint-docker:
          requires: [build-react_app]
      - test-react_app:
          requires: [build-react_app]
      - push-react_app:
          requires: [test-react_app, lint-react_app, lint-docker]
          filters:
            branches:
              only: [master]
      - deploy:
          requires: [push-react_app]
